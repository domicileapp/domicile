// Code generated by sqlc. DO NOT EDIT.
// source: recipes.sql

package db

import (
	"context"
	"database/sql"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
  title, description, instructions, ingredients, source
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, title, description, instructions, ingredients, source, creator_id
`

type CreateRecipeParams struct {
	Title        string
	Description  sql.NullString
	Instructions string
	Ingredients  string
	Source       sql.NullString
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Title,
		arg.Description,
		arg.Instructions,
		arg.Ingredients,
		arg.Source,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Instructions,
		&i.Ingredients,
		&i.Source,
		&i.CreatorID,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, created_at, updated_at, title, description, instructions, ingredients, source, creator_id FROM recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Instructions,
		&i.Ingredients,
		&i.Source,
		&i.CreatorID,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, created_at, updated_at, title, description, instructions, ingredients, source, creator_id FROM recipes
ORDER BY updated_at
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Instructions,
			&i.Ingredients,
			&i.Source,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes
SET title = $2,
description = $3,
instructions = $4,
ingredients = $5,
source = $6
WHERE id = $1
RETURNING id, created_at, updated_at, title, description, instructions, ingredients, source, creator_id
`

type UpdateRecipeParams struct {
	ID           int64
	Title        string
	Description  sql.NullString
	Instructions string
	Ingredients  string
	Source       sql.NullString
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Instructions,
		arg.Ingredients,
		arg.Source,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Instructions,
		&i.Ingredients,
		&i.Source,
		&i.CreatorID,
	)
	return i, err
}
